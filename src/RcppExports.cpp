// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/pROC.h"
#include <Rcpp.h>

using namespace Rcpp;

// bootstrapAucStratified
std::vector<double> bootstrapAucStratified(const size_t bootN, const pROC::ROC<>& aROC, const pROC::AucParams& aucParams);
RcppExport SEXP pROC_bootstrapAucStratified(SEXP bootNSEXP, SEXP aROCSEXP, SEXP aucParamsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const size_t >::type bootN(bootNSEXP);
    Rcpp::traits::input_parameter< const pROC::ROC<>& >::type aROC(aROCSEXP);
    Rcpp::traits::input_parameter< const pROC::AucParams& >::type aucParams(aucParamsSEXP);
    rcpp_result_gen = Rcpp::wrap(bootstrapAucStratified(bootN, aROC, aucParams));
    return rcpp_result_gen;
END_RCPP
}
// bootstrapAucNonStratified
std::vector<double> bootstrapAucNonStratified(const size_t bootN, const pROC::ROC<>& aROC, const pROC::AucParams& aucParams);
RcppExport SEXP pROC_bootstrapAucNonStratified(SEXP bootNSEXP, SEXP aROCSEXP, SEXP aucParamsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const size_t >::type bootN(bootNSEXP);
    Rcpp::traits::input_parameter< const pROC::ROC<>& >::type aROC(aROCSEXP);
    Rcpp::traits::input_parameter< const pROC::AucParams& >::type aucParams(aucParamsSEXP);
    rcpp_result_gen = Rcpp::wrap(bootstrapAucNonStratified(bootN, aROC, aucParams));
    return rcpp_result_gen;
END_RCPP
}
// delongPlacementsCpp
List delongPlacementsCpp(List roc);
RcppExport SEXP pROC_delongPlacementsCpp(SEXP rocSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type roc(rocSEXP);
    rcpp_result_gen = Rcpp::wrap(delongPlacementsCpp(roc));
    return rcpp_result_gen;
END_RCPP
}
// computeSeSpList
List computeSeSpList(const NumericVector& thresholds, const NumericVector& controls, const NumericVector& cases, const std::string& direction);
RcppExport SEXP pROC_computeSeSpList(SEXP thresholdsSEXP, SEXP controlsSEXP, SEXP casesSEXP, SEXP directionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type thresholds(thresholdsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type controls(controlsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type cases(casesSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type direction(directionSEXP);
    rcpp_result_gen = Rcpp::wrap(computeSeSpList(thresholds, controls, cases, direction));
    return rcpp_result_gen;
END_RCPP
}
// computeAuc
double computeAuc(const Rcpp::List& aROCList, const Rcpp::List& aucParamsList);
RcppExport SEXP pROC_computeAuc(SEXP aROCListSEXP, SEXP aucParamsListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type aROCList(aROCListSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type aucParamsList(aucParamsListSEXP);
    rcpp_result_gen = Rcpp::wrap(computeAuc(aROCList, aucParamsList));
    return rcpp_result_gen;
END_RCPP
}
// computeAucSeSp
double computeAucSeSp(const std::vector<double>& se, const std::vector<double>& sp, const Rcpp::List& aucParamsList);
RcppExport SEXP pROC_computeAucSeSp(SEXP seSEXP, SEXP spSEXP, SEXP aucParamsListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type se(seSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type sp(spSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type aucParamsList(aucParamsListSEXP);
    rcpp_result_gen = Rcpp::wrap(computeAucSeSp(se, sp, aucParamsList));
    return rcpp_result_gen;
END_RCPP
}
// runit_partial_auc_correct
double runit_partial_auc_correct(const double pauc, const double from, const double to);
RcppExport SEXP pROC_runit_partial_auc_correct(SEXP paucSEXP, SEXP fromSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type pauc(paucSEXP);
    Rcpp::traits::input_parameter< const double >::type from(fromSEXP);
    Rcpp::traits::input_parameter< const double >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(runit_partial_auc_correct(pauc, from, to));
    return rcpp_result_gen;
END_RCPP
}
// runit_Predictor_bracketOperator
NumericVector runit_Predictor_bracketOperator(const Rcpp::NumericVector& someControls, const Rcpp::NumericVector& someCases, const int i);
RcppExport SEXP pROC_runit_Predictor_bracketOperator(SEXP someControlsSEXP, SEXP someCasesSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type someControls(someControlsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type someCases(someCasesSEXP);
    Rcpp::traits::input_parameter< const int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(runit_Predictor_bracketOperator(someControls, someCases, i));
    return rcpp_result_gen;
END_RCPP
}
// runit_Predictor_bracketOperatorVector
NumericVector runit_Predictor_bracketOperatorVector(const Rcpp::NumericVector& someControls, const Rcpp::NumericVector& someCases);
RcppExport SEXP pROC_runit_Predictor_bracketOperatorVector(SEXP someControlsSEXP, SEXP someCasesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type someControls(someControlsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type someCases(someCasesSEXP);
    rcpp_result_gen = Rcpp::wrap(runit_Predictor_bracketOperatorVector(someControls, someCases));
    return rcpp_result_gen;
END_RCPP
}
// runit_Predictor_getOrder
IntegerVector runit_Predictor_getOrder(const Rcpp::NumericVector& someControls, const Rcpp::NumericVector& someCases);
RcppExport SEXP pROC_runit_Predictor_getOrder(SEXP someControlsSEXP, SEXP someCasesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type someControls(someControlsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type someCases(someCasesSEXP);
    rcpp_result_gen = Rcpp::wrap(runit_Predictor_getOrder(someControls, someCases));
    return rcpp_result_gen;
END_RCPP
}
// runit_Predictor_getControls
NumericVector runit_Predictor_getControls(const Rcpp::NumericVector& someControls, const Rcpp::NumericVector& someCases);
RcppExport SEXP pROC_runit_Predictor_getControls(SEXP someControlsSEXP, SEXP someCasesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type someControls(someControlsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type someCases(someCasesSEXP);
    rcpp_result_gen = Rcpp::wrap(runit_Predictor_getControls(someControls, someCases));
    return rcpp_result_gen;
END_RCPP
}
// runit_Predictor_getCases
NumericVector runit_Predictor_getCases(const Rcpp::NumericVector& someControls, const Rcpp::NumericVector& someCases);
RcppExport SEXP pROC_runit_Predictor_getCases(SEXP someControlsSEXP, SEXP someCasesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type someControls(someControlsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type someCases(someCasesSEXP);
    rcpp_result_gen = Rcpp::wrap(runit_Predictor_getCases(someControls, someCases));
    return rcpp_result_gen;
END_RCPP
}
// runit_Predictor_isControl
bool runit_Predictor_isControl(const Rcpp::NumericVector& someControls, const Rcpp::NumericVector& someCases, const int i);
RcppExport SEXP pROC_runit_Predictor_isControl(SEXP someControlsSEXP, SEXP someCasesSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type someControls(someControlsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type someCases(someCasesSEXP);
    Rcpp::traits::input_parameter< const int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(runit_Predictor_isControl(someControls, someCases, i));
    return rcpp_result_gen;
END_RCPP
}
// runit_Predictor_isCase
bool runit_Predictor_isCase(const Rcpp::NumericVector& someControls, const Rcpp::NumericVector& someCases, const int i);
RcppExport SEXP pROC_runit_Predictor_isCase(SEXP someControlsSEXP, SEXP someCasesSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type someControls(someControlsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type someCases(someCasesSEXP);
    Rcpp::traits::input_parameter< const int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(runit_Predictor_isCase(someControls, someCases, i));
    return rcpp_result_gen;
END_RCPP
}
